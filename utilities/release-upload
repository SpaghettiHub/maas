#!/usr/bin/env python3

"""Validate and upload a MAAS deb release to a PPA."""

from argparse import ArgumentParser, ArgumentTypeError, FileType, Namespace
from pathlib import Path
import re
from subprocess import CalledProcessError, check_output, PIPE
import sys
from typing import Optional

from packaging.version import Version


class PPAURL:
    """A PPA URL."""

    url: str
    release: Version
    pocket: Optional[str]

    _PPA_RE = re.compile(r"^ppa:maas/(?P<release>[0-9.]+)(-(?P<pocket>.*))?$")

    def __init__(self, url: str):
        match = self._PPA_RE.match(url)
        if not match:
            raise ArgumentTypeError("Invalid MAAS PPA URL")

        self.url = url
        matches = match.groupdict()
        self.release = Version(matches["release"])
        self.pocket = matches["pocket"]

    def __str__(self) -> str:
        return self.url

    @property
    def is_stable(self) -> bool:
        return not self.pocket


class ChangesFile(FileType):

    _FILE_NAME_RE = re.compile(r"^maas_(?P<version>[^-]+)-.*_source.changes$")

    def __call__(self, path: str):
        fileobj = super().__call__(path)
        base_path = Path(path).name
        match = self._FILE_NAME_RE.match(base_path)
        if not match:
            raise ArgumentTypeError("Invalid changes file name.")
        # add version
        version = match.groupdict()["version"].replace("~", "")
        fileobj.version = Version(version)
        return fileobj


def parse_args() -> Namespace:
    parser = ArgumentParser(description=__doc__)
    parser.add_argument(
        "ppa_url",
        type=PPAURL,
        help="PPA URL, e.g. ppa:maas/2.9",
        metavar="PPA_URL",
    )
    parser.add_argument(
        "changes_file",
        type=ChangesFile(),
        help="Path to .changes file to upload",
        metavar="CHANGES_FILE",
    )
    parser.add_argument(
        "--validate-only",
        action="store_true",
        help="Dry run, don't actually upload",
    )
    return parser.parse_args()


def upload_ppa(ppa_url: str, changes_file: str):
    try:
        output = check_output(["dput", ppa_url, changes_file], stderr=PIPE)
    except CalledProcessError as e:
        sys.exit("Upload failed with message:\n" + e.stderr.decode())
    print(output.decode(), end="")


def release_version(version: Version):
    """Return version as major.minor only."""
    return "{}.{}".format(*version.release[:2])


if __name__ == "__main__":
    args = parse_args()
    version = args.changes_file.version
    ppa_version = args.ppa_url.release
    changes_release = release_version(version)
    ppa_release = release_version(ppa_version)
    if changes_release != ppa_release:
        sys.exit(
            f"PPA ({ppa_release}) and changes file ({changes_release}) "
            "versions don't match"
        )
    if (
        version > ppa_version
        and version.is_prerelease
        and args.ppa_url.is_stable
    ):
        sys.exit(
            "Can't upload prerelease version of a point release to stable PPA."
        )
    if not args.validate_only:
        upload_ppa(str(args.ppa_url), args.changes_file.name)
