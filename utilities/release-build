#!/bin/bash -e
#
# Build release packages for specified distro releases
#
# Usage:
#  ./release-build bionic
#
# It's possible to override the packge build revision with DEB_BUILD_REV=n (by
# default it's 1)
#
# If SKIP_UI_BUILD=1 is specified, the UI tree won't be rebuilt.
#

# The package build revision
DEB_BUILD_REV=${DEB_BUILD_REV:-1}
# Whether to skip the UI build
SKIP_UI_BUILD=${SKIP_UI_BUILD:-0}

declare -A SUPPORTED_RELEASES=(
    [bionic]=18.04
)

ROOTDIR="$(dirname "$(dirname "$(realpath "$0")")")"
BUILDDIR="$ROOTDIR/build_pkg"
PACKAGE_BUILD_AREA="$ROOTDIR/../build-area"

exit_error() {
    echo "$@" >&2
    exit 1
}

# check that provided release codenames are valid
check_releases() {
    if [ "$#" == 0 ]; then
        exit_error "No distro codename specified."
    fi

    local name
    for name in "$@"; do
        if [ -z "${SUPPORTED_RELEASES[$name]}" ]; then
            exit_error "Unsupported distro: $name"
        fi
    done
}

build_source_package() {
    if [ "$SKIP_UI_BUILD" != 1 ]; then
        make -C "$ROOTDIR/src/maasui" clean build  # ensure the UI is updated
    fi
    make -C "$ROOTDIR" package-tree
}

# ensure name and email address are correct for the signing (must have DEBEMAIL
# and DEBFULLNAME set)
ensure_changelog_author() {
    dch -a "" --release-heuristic log --nomultimaint
}

update_changelog_version() {
    local deb_version="$1"
    local release="$2"
    local new_version="${deb_version}~${SUPPORTED_RELEASES[$release]}.${DEB_BUILD_REV}"
    sed -i "1 s/(.*;/($new_version) $release;/" debian/changelog
}


# Main
check_releases "$@"
releases="$*"

mkdir -p "$BUILDDIR"

build_source_package
# copy source package in the build dir
source_package_dir=$(
    find "$PACKAGE_BUILD_AREA" -mindepth 1 -maxdepth 1 -type d | head -n1)
source_package_dir="$(basename "$source_package_dir")"
package_dir="$BUILDDIR/$source_package_dir"
rm -rf "$package_dir"
cp -a "$PACKAGE_BUILD_AREA"/* "$BUILDDIR"

(
    cd "$package_dir"
    ensure_changelog_author
    deb_version=$(dpkg-parsechangelog -S version)

    for release in $releases; do
        update_changelog_version "$deb_version" "$release"
        debuild -S -sa
    done
)
