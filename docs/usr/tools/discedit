#!/usr/bin/python3

import argparse
import glob
import os
import re
import shutil
import subprocess
import sys
import tempfile
import yaml

from discourse_api import DiscourseAPI


def generate_doc_set(git_root, markdown_dir, deb_dir, snap_dir, debug, api):
    copy_stylesheets(git_root, deb_dir, snap_dir)
    for markdown_file in glob.glob(os.path.join(markdown_dir, "*.md")):
        process_markdown_file(
            markdown_file, git_root, deb_dir, snap_dir, debug, api
        )
    sys.exit(0)


def copy_stylesheets(git_root, deb_dir, snap_dir):
    for subdir in ["ui", "cli"]:
        stylesheet_src = f"{git_root}/html-support/stylesheet.css"
        for target_dir in [deb_dir, snap_dir]:
            shutil.copy(
                stylesheet_src, f"{target_dir}/{subdir}/css/stylesheet.css"
            )


def process_markdown_file(
    markdown_file, git_root, deb_dir, snap_dir, debug, api
):
    topic_number, html_filename = extract_filenames(markdown_file, debug)
    markdown_content = read_file(markdown_file)
    api.update_topic_content(topic_number, markdown_content)
    print(f"discourse topic {topic_number} updated.")
    new_content = re.sub(
        r"/t/([\w-]+)(?:/[\d]+)", r"\1.html", markdown_content
    )
    temp_markdown_file = f"/tmp/{html_filename}.tmp.md"
    write_file(temp_markdown_file, new_content)
    topic_title = api.get_title(topic_number)
    convert_to_html(
        git_root,
        temp_markdown_file,
        topic_title,
        deb_dir,
        snap_dir,
        html_filename,
    )


def extract_filenames(markdown_file, debug):
    topic_number = re.search(r"\d{4}", markdown_file).group()
    if debug:
        print(f"extracted topic number: {topic_number}")
    html_filename = re.sub(
        r"-\d+", "", os.path.basename(markdown_file)
    ).replace(".md", ".html")
    if debug:
        print(f"html filename: {html_filename}")
    return topic_number, html_filename


def read_file(filepath):
    with open(filepath, "r") as f:
        return f.read()


def write_file(filepath, content):
    with open(filepath, "w") as file:
        file.write(content)


def convert_to_html(
    git_root, temp_markdown_file, topic_title, deb_dir, snap_dir, html_filename
):
    for subdir in ["ui", "cli"]:
        convert_single_html(
            git_root,
            temp_markdown_file,
            topic_title,
            deb_dir,
            subdir,
            html_filename,
        )
        convert_single_html(
            git_root,
            temp_markdown_file,
            topic_title,
            snap_dir,
            subdir,
            html_filename,
        )


def convert_single_html(
    git_root,
    temp_markdown_file,
    topic_title,
    target_dir,
    subdir,
    html_filename,
):
    subprocess.run(
        [
            "pandoc",
            "-s",
            temp_markdown_file,
            "-o",
            f"{target_dir}/{subdir}/{html_filename}",
            "--css=css/stylesheet.css",
            f"--template={git_root}/html-support/template.html",
            f"--metadata=title:{topic_title}",
            f"--extract-media={target_dir}/images",
            "-M",
            "ui",
        ]
    )
    print(f"{html_filename} processed")


def handle_single_topic(args, md_dir, api, git_root):
    markdown_file = validate_topic(args.tnum, md_dir, args.d)
    temp_working_dir = create_temp_directory(args.d)
    repo_md_copy = copy_file_to_temp(markdown_file, temp_working_dir, args.d)
    discourse_md = api.get_markdown(args.tnum)
    write_file(markdown_file, discourse_md)
    if args.p:
        commit_changes_to_repo(git_root)
    discourse_md_copy = copy_discourse_version(
        markdown_file, temp_working_dir, args.d
    )
    edit_with_emacs(repo_md_copy, discourse_md_copy)
    handle_commit_and_publish(
        args, markdown_file, repo_md_copy, api, temp_working_dir, git_root
    )


def validate_topic(topic_number, markdown_dir, debug):
    mdfile = glob.glob(os.path.join(markdown_dir, f"*{topic_number}*.md"))
    if not mdfile:
        sys.exit(f"{topic_number}: no such topic")
    if debug:
        print(f"markdown filename (mdfile): {mdfile}")
    return mdfile[0]


def create_temp_directory(debug):
    try:
        twd = tempfile.mkdtemp()
    except IOError as e:
        sys.exit("I/O error creating temp working directory")
    if debug:
        print(f"temp working directory (twd): {twd}")
    return twd


def copy_file_to_temp(markdown_file, temp_working_dir, debug):
    try:
        repo_md_copy = os.path.join(
            temp_working_dir, os.path.basename(markdown_file)
        )
        shutil.copy(markdown_file, repo_md_copy)
    except FileNotFoundError:
        sys.exit(f"{markdown_file}: no such file or directory")
    except IOError as e:
        sys.exit("I/O error creating temp working directory")
    if debug:
        print(f"wkg copy of git markdown vsn (repo_md_copy): {repo_md_copy}")
    return repo_md_copy


def commit_changes_to_repo(git_root):
    os.chdir(git_root)
    subprocess.run(["git", "add", "."])
    commit_message = "doc: updating file with discourse changes"
    subprocess.run(["git", "commit", "-m", commit_message])
    subprocess.run(["git", "push"])


def copy_discourse_version(markdown_file, temp_working_dir, debug):
    try:
        discourse_md_copy = (
            os.path.join(temp_working_dir, os.path.basename(markdown_file))
            + ".disc"
        )
        shutil.copy(markdown_file, discourse_md_copy)
    except FileNotFoundError:
        sys.exit(f"{markdown_file}: no such file or directory")
    except IOError as e:
        sys.exit("I/O error creating temp working directory")
    if debug:
        print(
            f"wkg copy of discourse vsn (discourse_md_copy): {discourse_md_copy}"
        )
    return discourse_md_copy


def edit_with_emacs(repo_md_copy, discourse_md_copy):
    emacs_command = [
        "emacs",
        "-eval",
        f'(progn (find-file "{repo_md_copy}") (split-window-right) '
        f'(find-file "{discourse_md_copy}") (other-window 2) '
        f'(ediff-files "{repo_md_copy}" "{discourse_md_copy}"))',
    ]
    subprocess.run(emacs_command)


def handle_commit_and_publish(
    args,
    markdown_file,
    repo_md_copy,
    api,
    temp_working_dir,
    git_root,
):
    if ask_yes_no_question("commit changes to launchpad?"):
        shutil.copy(repo_md_copy, markdown_file)
        os.chdir(git_root)
        commit_message = input("Enter commit message: ")
        subprocess.run(["git", "add", "."])
        subprocess.run(["git", "commit", "-m", commit_message])
        subprocess.run(["git", "push"])
    else:
        print("no changes committed to launchpad")

    if ask_yes_no_question("publish changes to discourse?"):
        with open(markdown_file, "r") as f:
            markdown_content = f.read()
        api.update_topic_content(args.tnum, markdown_content)
        print(f"discourse topic {args.tnum} updated.")
    else:
        print("no changes published to discourse")


def ask_yes_no_question(prompt):
    while True:
        prompt_string = prompt + " (yes/no) "
        response = input(prompt_string)
        if response == "yes":
            return True
        elif response == "no":
            return False
        else:
            print("Please enter yes or no.")


# parse args
parser = argparse.ArgumentParser(
    description="discedit discourse editing and version sync tool"
)
parser.add_argument("tnum", type=int, nargs="?", help="topic number to edit")
parser.add_argument("-d", action="store_true", help="print debug output")
parser.add_argument(
    "-p",
    action="store_true",
    help="pre-commit Discourse version to maas/docs/usr/markdown",
)
parser.add_argument(
    "-a",
    action="store_true",
    help="autogenerate complete discourse and html doc sets from source markdown",
)
args = parser.parse_args()
if not args.tnum and not args.a:
    parser.print_usage()
    sys.exit(1)

# load config file
home = os.path.expanduser("~")
config_path = os.path.join(home, ".config", "disced.conf")
if not os.path.exists(config_path):
    sys.exit(f"discedit: config file {config_path} not found.")
with open(config_path, "r") as f:
    try:
        config = yaml.safe_load(f)
    except yaml.YAMLError as e:
        sys.exit(f"discedit: error parsing YAML config file: {e}")
git_root = config.get("git_root")
if not os.path.exists(git_root):
    sys.exit(f"{git_root}: no such repository")
md_dir = config.get("markdown_src")
if not os.path.exists(md_dir):
    sys.exit(f"{md_dir}: no such directory")

# instantiate discourseapi object
api = DiscourseAPI(config)

if args.a:
    generate_doc_set(git_root, md_dir, args.d, api)

if not args.a:
    handle_single_topic(args, md_dir, api, git_root)
