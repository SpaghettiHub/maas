// Code generated by capnpc-go. DO NOT EDIT.

package rpc

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type Link struct{ capnp.Struct }

// Link_TypeID is the unique identifier for the type Link.
const Link_TypeID = 0xc7251b7c2c125e6e

func NewLink(s *capnp.Segment) (Link, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Link{st}, err
}

func NewRootLink(s *capnp.Segment) (Link, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Link{st}, err
}

func ReadRootLink(msg *capnp.Message) (Link, error) {
	root, err := msg.Root()
	return Link{root.Struct()}, err
}

func (s Link) String() string {
	str, _ := text.Marshal(0xc7251b7c2c125e6e, s.Struct)
	return str
}

func (s Link) Mode() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Link) HasMode() bool {
	return s.Struct.HasPtr(0)
}

func (s Link) ModeBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Link) SetMode(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Link) Address() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Link) HasAddress() bool {
	return s.Struct.HasPtr(1)
}

func (s Link) AddressBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Link) SetAddress(v string) error {
	return s.Struct.SetText(1, v)
}

func (s Link) Gateway() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s Link) HasGateway() bool {
	return s.Struct.HasPtr(2)
}

func (s Link) GatewayBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s Link) SetGateway(v string) error {
	return s.Struct.SetText(2, v)
}

func (s Link) Netmask() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s Link) SetNetmask(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

// Link_List is a list of Link.
type Link_List struct{ capnp.List }

// NewLink creates a new list of Link.
func NewLink_List(s *capnp.Segment, sz int32) (Link_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return Link_List{l}, err
}

func (s Link_List) At(i int) Link { return Link{s.List.Struct(i)} }

func (s Link_List) Set(i int, v Link) error { return s.List.SetStruct(i, v.Struct) }

func (s Link_List) String() string {
	str, _ := text.MarshalList(0xc7251b7c2c125e6e, s.List)
	return str
}

// Link_Future is a wrapper for a Link promised by a client call.
type Link_Future struct{ *capnp.Future }

func (p Link_Future) Struct() (Link, error) {
	s, err := p.Future.Struct()
	return Link{s}, err
}

type InterfaceDetails struct{ capnp.Struct }

// InterfaceDetails_TypeID is the unique identifier for the type InterfaceDetails.
const InterfaceDetails_TypeID = 0xca5e2a006234f169

func NewInterfaceDetails(s *capnp.Segment) (InterfaceDetails, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4})
	return InterfaceDetails{st}, err
}

func NewRootInterfaceDetails(s *capnp.Segment) (InterfaceDetails, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4})
	return InterfaceDetails{st}, err
}

func ReadRootInterfaceDetails(msg *capnp.Message) (InterfaceDetails, error) {
	root, err := msg.Root()
	return InterfaceDetails{root.Struct()}, err
}

func (s InterfaceDetails) String() string {
	str, _ := text.Marshal(0xca5e2a006234f169, s.Struct)
	return str
}

func (s InterfaceDetails) MacAddress() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s InterfaceDetails) HasMacAddress() bool {
	return s.Struct.HasPtr(0)
}

func (s InterfaceDetails) MacAddressBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s InterfaceDetails) SetMacAddress(v string) error {
	return s.Struct.SetText(0, v)
}

func (s InterfaceDetails) Type() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s InterfaceDetails) HasType() bool {
	return s.Struct.HasPtr(1)
}

func (s InterfaceDetails) TypeBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s InterfaceDetails) SetType(v string) error {
	return s.Struct.SetText(1, v)
}

func (s InterfaceDetails) Links() (Link_List, error) {
	p, err := s.Struct.Ptr(2)
	return Link_List{List: p.List()}, err
}

func (s InterfaceDetails) HasLinks() bool {
	return s.Struct.HasPtr(2)
}

func (s InterfaceDetails) SetLinks(v Link_List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewLinks sets the links field to a newly
// allocated Link_List, preferring placement in s's segment.
func (s InterfaceDetails) NewLinks(n int32) (Link_List, error) {
	l, err := NewLink_List(s.Struct.Segment(), n)
	if err != nil {
		return Link_List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s InterfaceDetails) Vid() uint64 {
	return s.Struct.Uint64(0)
}

func (s InterfaceDetails) SetVid(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s InterfaceDetails) Enabled() bool {
	return s.Struct.Bit(64)
}

func (s InterfaceDetails) SetEnabled(v bool) {
	s.Struct.SetBit(64, v)
}

func (s InterfaceDetails) Parents() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(3)
	return capnp.TextList{List: p.List()}, err
}

func (s InterfaceDetails) HasParents() bool {
	return s.Struct.HasPtr(3)
}

func (s InterfaceDetails) SetParents(v capnp.TextList) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewParents sets the parents field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s InterfaceDetails) NewParents(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

// InterfaceDetails_List is a list of InterfaceDetails.
type InterfaceDetails_List struct{ capnp.List }

// NewInterfaceDetails creates a new list of InterfaceDetails.
func NewInterfaceDetails_List(s *capnp.Segment, sz int32) (InterfaceDetails_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4}, sz)
	return InterfaceDetails_List{l}, err
}

func (s InterfaceDetails_List) At(i int) InterfaceDetails { return InterfaceDetails{s.List.Struct(i)} }

func (s InterfaceDetails_List) Set(i int, v InterfaceDetails) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s InterfaceDetails_List) String() string {
	str, _ := text.MarshalList(0xca5e2a006234f169, s.List)
	return str
}

// InterfaceDetails_Future is a wrapper for a InterfaceDetails promised by a client call.
type InterfaceDetails_Future struct{ *capnp.Future }

func (p InterfaceDetails_Future) Struct() (InterfaceDetails, error) {
	s, err := p.Future.Struct()
	return InterfaceDetails{s}, err
}

type Interface struct{ capnp.Struct }

// Interface_TypeID is the unique identifier for the type Interface.
const Interface_TypeID = 0x929a2663d1c662e2

func NewInterface(s *capnp.Segment) (Interface, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Interface{st}, err
}

func NewRootInterface(s *capnp.Segment) (Interface, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Interface{st}, err
}

func ReadRootInterface(msg *capnp.Message) (Interface, error) {
	root, err := msg.Root()
	return Interface{root.Struct()}, err
}

func (s Interface) String() string {
	str, _ := text.Marshal(0x929a2663d1c662e2, s.Struct)
	return str
}

func (s Interface) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Interface) HasName() bool {
	return s.Struct.HasPtr(0)
}

func (s Interface) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Interface) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Interface) Iface() (InterfaceDetails, error) {
	p, err := s.Struct.Ptr(1)
	return InterfaceDetails{Struct: p.Struct()}, err
}

func (s Interface) HasIface() bool {
	return s.Struct.HasPtr(1)
}

func (s Interface) SetIface(v InterfaceDetails) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewIface sets the iface field to a newly
// allocated InterfaceDetails struct, preferring placement in s's segment.
func (s Interface) NewIface() (InterfaceDetails, error) {
	ss, err := NewInterfaceDetails(s.Struct.Segment())
	if err != nil {
		return InterfaceDetails{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// Interface_List is a list of Interface.
type Interface_List struct{ capnp.List }

// NewInterface creates a new list of Interface.
func NewInterface_List(s *capnp.Segment, sz int32) (Interface_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Interface_List{l}, err
}

func (s Interface_List) At(i int) Interface { return Interface{s.List.Struct(i)} }

func (s Interface_List) Set(i int, v Interface) error { return s.List.SetStruct(i, v.Struct) }

func (s Interface_List) String() string {
	str, _ := text.MarshalList(0x929a2663d1c662e2, s.List)
	return str
}

// Interface_Future is a wrapper for a Interface promised by a client call.
type Interface_Future struct{ *capnp.Future }

func (p Interface_Future) Struct() (Interface, error) {
	s, err := p.Future.Struct()
	return Interface{s}, err
}

func (p Interface_Future) Iface() InterfaceDetails_Future {
	return InterfaceDetails_Future{Future: p.Future.Field(1, nil)}
}

type Interfaces struct{ capnp.Struct }

// Interfaces_TypeID is the unique identifier for the type Interfaces.
const Interfaces_TypeID = 0x826b9c4ff97d4a43

func NewInterfaces(s *capnp.Segment) (Interfaces, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Interfaces{st}, err
}

func NewRootInterfaces(s *capnp.Segment) (Interfaces, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Interfaces{st}, err
}

func ReadRootInterfaces(msg *capnp.Message) (Interfaces, error) {
	root, err := msg.Root()
	return Interfaces{root.Struct()}, err
}

func (s Interfaces) String() string {
	str, _ := text.Marshal(0x826b9c4ff97d4a43, s.Struct)
	return str
}

func (s Interfaces) Ifaces() (Interface_List, error) {
	p, err := s.Struct.Ptr(0)
	return Interface_List{List: p.List()}, err
}

func (s Interfaces) HasIfaces() bool {
	return s.Struct.HasPtr(0)
}

func (s Interfaces) SetIfaces(v Interface_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewIfaces sets the ifaces field to a newly
// allocated Interface_List, preferring placement in s's segment.
func (s Interfaces) NewIfaces(n int32) (Interface_List, error) {
	l, err := NewInterface_List(s.Struct.Segment(), n)
	if err != nil {
		return Interface_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Interfaces_List is a list of Interfaces.
type Interfaces_List struct{ capnp.List }

// NewInterfaces creates a new list of Interfaces.
func NewInterfaces_List(s *capnp.Segment, sz int32) (Interfaces_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Interfaces_List{l}, err
}

func (s Interfaces_List) At(i int) Interfaces { return Interfaces{s.List.Struct(i)} }

func (s Interfaces_List) Set(i int, v Interfaces) error { return s.List.SetStruct(i, v.Struct) }

func (s Interfaces_List) String() string {
	str, _ := text.MarshalList(0x826b9c4ff97d4a43, s.List)
	return str
}

// Interfaces_Future is a wrapper for a Interfaces promised by a client call.
type Interfaces_Future struct{ *capnp.Future }

func (p Interfaces_Future) Struct() (Interfaces, error) {
	s, err := p.Future.Struct()
	return Interfaces{s}, err
}

const schema_dae346a935a6f239 = "x\xda|\x921h\x14O\x18\xc5\xdf\x9b\xd9\xfb'\x81" +
	"\xfc/\xb7\xde\x15\x82\x85\"Q4\x18\x89\x1a\x0b\xd3$" +
	"F\x11\"\x82\xf9\x0a\x11D\x82\x93\xdb\xd1,w\xb79" +
	"\xee\x16C@9\x14,l\xad4\xa4PP\xd1\xde\xc2" +
	"@\x04#j \x9d\x9d\xd8\xa9\x88X\x89v\xda\xac\xcc" +
	"\x06\xf7\x16A\xbb\x9d\xc7o\xbf\xf7\xde|32\xc9\x09" +
	"u\xa0\xb0\xae\x00\xd9Q\xf8/9v\xf2\xea\x8f\xd3\xcb" +
	"\xb5\xeb\xf0\x8bL\x8e|\x7fx\xf8\xf1\x89\x8f\xefP`" +
	"\x0fP\x9e\xe2F\xf9L\xfa%\x1c\x07\x93\x0f\xb3\xaf\xdf" +
	"Tw/\xdd\xfa\x83U\x8e\xb8\xc6\x17\xe5\x9b){\x83" +
	"\x0b`\x12\xcdl\xd9we\xdb\xaeuH\x91yX;" +
	"\xe4=\x97\xca_R\xf8\x13?\x83_\xc3o\xa3\xb3C" +
	"3\x1bR\xa4\xca\xa1\x9e\x03V\xd4\xcf\xf2+\xe7ph" +
	"M\x9d%\x86\x93\xc8\xc6\x0b\xf3\xad\xda~U5\xcd\xa8" +
	"96\x15\xc5\xb6u\xd1Tm\x1b\x98&\xc5\xd3\x1e\xe0" +
	"\x11\xf0\xff\x1f\x03\xa4WS\x06\x15\xc7\xc3\x14a\x11\x9c" +
	"\xd6d\xa9[\x05t\xe2_\xa7\xa63{\xb3\x99{\x87" +
	"\x00\x19\xd4\x94\x11E\x9f\xac\xd0\x89\xc3\x07\x01\xd9\xa3)" +
	"\xa3\x8a\x03\x91iX\xf6C\xb1\x1f\xdc\x9e\xba\xb2\xf4\xbb" +
	"\x1f\xc8R\xce\x8b\x9b^\xa7B\x1d\xd5\x9cM)\xb31" +
	"\xce\xe6\xbc\xa6\xcc\xe5l\xec$ \x174\xa5\xae\xe8+" +
	"U\xa1\x02\xfc\xd0\x89\x81\xa64\x15\xa9+\xd4\x80\xdfp" +
	"\xda\x9c\xa6\xc4\x8a\x03\x8d\xf9 \xcb\xd31A\xd0\xb2\xed" +
	"vv\xbedb\xbb`\x16\xb3sd\xe3\x86i\xd7\xe8" +
	"A\xd1\xfb\xc7\xad\x1c\x1f\xb7\xb1\x09\xebm\x97zk\x96" +
	"\xfa\xce9@nk\xca\xfd\\\xea{\xae\xca\xb2\xa6<" +
	"\xca\xa5~\xe0n\xec\xae\xa6\xacvS\xaf\xec\x04\xe4\x89" +
	"\xa6<W\xf4\xbd\x89\x0a=\xc0\x7f\xe6\xaa<\xd5\x94\x97" +
	"\x8a~AWX\x00\xfc5'\xaej\xca[\xc5\xa4a" +
	"\xaaG]+\xe8n\xaf\x81x\xb1\xd9]B=\x8cj" +
	"\xb9\xcdg\x0fss\xf3=\x97\xc3\x80}P\xec\x03;" +
	"62\xb3u\x1b\x90P$\xd8i\x9a\x96\x8d\xe2\xecg" +
	"7\xb1\x08\xfe\x0a\x00\x00\xff\xff\x8c{\xba\xe7"

func init() {
	schemas.Register(schema_dae346a935a6f239,
		0x826b9c4ff97d4a43,
		0x929a2663d1c662e2,
		0xc7251b7c2c125e6e,
		0xca5e2a006234f169)
}
