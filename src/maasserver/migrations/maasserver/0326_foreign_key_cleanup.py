# Generated by Django 3.2.12 on 2024-05-28 07:32

from django.db import migrations, models

from maasserver.models import regioncontrollerprocess

clean_up_missing_fk_maasserver_dnsresource_ip_addresses = """\
DELETE FROM public.maasserver_dnsresource_ip_addresses
WHERE (dnsresource_id NOT IN
       (SELECT id FROM public.maasserver_dnsresource))
    OR (staticipaddress_id NOT IN
        (SELECT id FROM public.maasserver_staticipaddress));
"""

clean_up_missing_fk_maasserver_forwarddnsserver_domains = """\
DELETE FROM public.maasserver_forwarddnsserver_domains
WHERE (forwarddnsserver_id NOT IN
       (SELECT id FROM public.maasserver_forwarddnsserver));
"""

clean_up_missing_fk_maasserver_interface_ip_addresses = """\
DELETE FROM public.maasserver_interface_ip_addresses
WHERE (interface_id NOT IN
       (SELECT id FROM public.maasserver_interface))
    OR (staticipaddress_id NOT IN
        (SELECT id FROM public.maasserver_staticipaddress));
"""

clean_up_missing_fk_maasserver_podhints_nodes = """\
DELETE FROM public.maasserver_podhints_nodes
WHERE (node_id NOT IN
       (SELECT id FROM public.maasserver_node))
    OR (podhints_id NOT IN
        (SELECT id FROM public.maasserver_podhints));
"""

clean_up_missing_fk_maasserver_node_tags = """\
DELETE FROM public.maasserver_node_tags
WHERE (node_id NOT IN
       (SELECT id FROM public.maasserver_node))
    OR (tag_id NOT IN
        (SELECT id FROM public.maasserver_tag));
"""


def clean_up_missing_fk_bmc(apps, schema_editor):
    PodStoragePool = apps.get_model("maasserver", "PodStoragePool")
    BMC = apps.get_model("maasserver", "BMC")

    BMC.objects.exclude(
        default_storage_pool__isnull=False,
        default_storage_pool__in=PodStoragePool.objects.all(),
    ).update(default_storage_pool=None)


def clean_up_missing_fk_staticroute(apps, schema_editor):
    Subnet = apps.get_model("maasserver", "Subnet")
    StaticRoute = apps.get_model("maasserver", "StaticRoute")

    StaticRoute.objects.exclude(
        destination__isnull=False,
        destination__in=Subnet.objects.all(),
    ).update(destination=None)

    StaticRoute.objects.exclude(
        source__isnull=False,
        source__in=Subnet.objects.all(),
    ).update(source=None)


def clean_up_missing_fk_virtualmachinedisk(apps, schema_editor):
    PodStoragePool = apps.get_model("maasserver", "PodStoragePool")
    VirtualMachine = apps.get_model("maasserver", "VirtualMachine")
    VirtualMachineDisk = apps.get_model("maasserver", "VirtualMachineDisk")

    VirtualMachineDisk.objects.exclude(
        vm__isnull=False,
        vm__in=VirtualMachine.objects.all(),
    ).update(vm=None)

    VirtualMachineDisk.objects.exclude(
        backing_pool__isnull=False,
        backing_pool__in=PodStoragePool.objects.all(),
    ).update(backing_pool=None)


def clean_up_missing_fk_virtualmachineinterface(apps, schema_editor):
    VirtualMachine = apps.get_model("maasserver", "VirtualMachine")
    VirtualMachineInterface = apps.get_model(
        "maasserver", "VirtualMachineInterface"
    )

    VirtualMachineInterface.objects.exclude(
        vm__isnull=False,
        vm__in=VirtualMachine.objects.all(),
    ).update(vm=None)


def clean_up_missing_fk_vlan(apps, schema_editor):
    RackController = apps.get_model("maasserver", "RackController")
    VLAN = apps.get_model("maasserver", "VLAN")

    VLAN.objects.exclude(
        primary_rack__isnull=False,
        primary_rack__in=RackController.objects.all(),
    ).update(primary_rack=None)

    VLAN.objects.exclude(
        secondary_rack__isnull=False,
        secondary_rack__in=RackController.objects.all(),
    ).update(secondary_rack=None)


def clean_up_missing_fk_node(apps, schema_editor):
    Interface = apps.get_model("maasserver", "Interface")
    NodeConfig = apps.get_model("maasserver", "NodeConfig")
    RegionControllerProcess = apps.get_model(
        "maasserver", "RegionControllerProcess"
    )
    StaticIPAddress = apps.get_model("maasserver", "StaticIPAddress")
    Node = apps.get_model("maasserver", "Node")

    Node.objects.exclude(
        boot_interface__isnull=False,
        boot_interface__in=Interface.objects.all(),
    ).update(boot_interface=None)

    Node.objects.exclude(
        current_config__isnull=False,
        current_config__in=NodeConfig.objects.all(),
    ).update(current_config=None)

    Node.objects.exclude(
        gateway_link_ipv4__isnull=False,
        gateway_link_ipv4__in=StaticIPAddress.objects.all(),
    ).update(gateway_link_ipv4=None)

    Node.objects.exclude(
        gateway_link_ipv6__isnull=False,
        gateway_link_ipv6__in=StaticIPAddress.objects.all(),
    ).update(gateway_link_ipv6=None)

    Node.objects.exclude(
        managing_process__isnull=False,
        managing_process__in=RegionControllerProcess.objects.all(),
    ).update(managing_process=None)

    Node.objects.exclude(
        dns_process__isnull=False,
        dns_process__in=RegionControllerProcess.objects.all(),
    ).update(dns_process=None)


class Migration(migrations.Migration):
    dependencies = [
        ("maasserver", "0325_foreign_key_drop"),
    ]

    operations = [
        migrations.RunPython(clean_up_missing_fk_bmc),
        migrations.RunPython(clean_up_missing_fk_staticroute),
        migrations.RunPython(clean_up_missing_fk_virtualmachinedisk),
        migrations.RunPython(clean_up_missing_fk_virtualmachineinterface),
        migrations.RunPython(clean_up_missing_fk_vlan),
        migrations.RunPython(clean_up_missing_fk_node),
        migrations.RunSQL(
            clean_up_missing_fk_maasserver_dnsresource_ip_addresses
        ),
        migrations.RunSQL(
            clean_up_missing_fk_maasserver_forwarddnsserver_domains
        ),
        migrations.RunSQL(
            clean_up_missing_fk_maasserver_interface_ip_addresses
        ),
        migrations.RunSQL(clean_up_missing_fk_maasserver_podhints_nodes),
        migrations.RunSQL(clean_up_missing_fk_maasserver_node_tags),
    ]
