# Copyright 2025 Canonical Ltd.  This software is licensed under the
# GNU Affero General Public License version 3 (see the file LICENSE).

from datetime import datetime
from typing import Self, Union

from pydantic import Field

from maascommon.enums.boot_resources import BootResourceType
from maasservicelayer.models.base import ResourceBuilder, UNSET, Unset
from maasservicelayer.simplestreams.models import (
    BootloaderProduct,
    MultiFileProduct,
    Product,
    SingleFileProduct,
)


class BootResourceBuilder(ResourceBuilder):
    """Autogenerated from utilities/generate_builders.py.

    You can still add your custom methods here, they won't be overwritten by
    the generated code.
    """

    alias: Union[str, None, Unset] = Field(default=UNSET, required=False)
    architecture: Union[str, Unset] = Field(default=UNSET, required=False)
    base_image: Union[str, Unset] = Field(default=UNSET, required=False)
    bootloader_type: Union[str, None, Unset] = Field(
        default=UNSET, required=False
    )
    created: Union[datetime, Unset] = Field(default=UNSET, required=False)
    extra: Union[dict, Unset] = Field(default=UNSET, required=False)
    kflavor: Union[str, None, Unset] = Field(default=UNSET, required=False)
    last_deployed: Union[datetime, None, Unset] = Field(
        default=UNSET, required=False
    )
    name: Union[str, Unset] = Field(default=UNSET, required=False)
    rolling: Union[bool, Unset] = Field(default=UNSET, required=False)
    rtype: Union[BootResourceType, Unset] = Field(
        default=UNSET, required=False
    )
    updated: Union[datetime, Unset] = Field(default=UNSET, required=False)

    @classmethod
    def _from_simplestreams_bootloader_product(
        cls, product: BootloaderProduct
    ) -> Self:
        return cls(
            rtype=BootResourceType.SYNCED,
            name=f"{product.os}/{product.bootloader_type}",
            architecture=f"{product.arch}/generic",
            kflavor=None,
            bootloader_type=product.bootloader_type,
            alias=None,
            extra={},
            rolling=False,
            base_image="",
        )

    @classmethod
    def _from_simplestreams_single_file_product(
        cls, product: SingleFileProduct
    ) -> Self:
        return cls(
            rtype=BootResourceType.SYNCED,
            name=f"{product.os}/{product.release}",
            architecture=f"{product.arch}/{product.subarch}",
            kflavor=None,
            bootloader_type=None,
            alias=f"{product.os}/{product.version}",
            extra={"subarches": product.subarches},
            rolling=False,
            base_image="",
        )

    @classmethod
    def _from_simplestreams_multi_file_product(
        cls, product: MultiFileProduct
    ) -> Self:
        # The rack controller assumes the subarch is the kernel. We need to
        # include the kflavor in the subarch otherwise the rack will
        # overwrite the generic kernel with each kernel flavor.
        if product.kflavor not in (product.subarch, "generic") and (
            "hwe-" in product.subarch or "ga-" in product.subarch
        ):
            if product.subarch.endswith("-edge"):
                subarch = f"{product.subarch.removesuffix('-edge')}-{product.kflavor}-edge"
            else:
                subarch = f"{product.subarch}-{product.kflavor}"
        else:
            subarch = product.subarch
        return cls(
            rtype=BootResourceType.SYNCED,
            name=f"{product.os}/{product.release}",
            architecture=f"{product.arch}/{subarch}",
            kflavor=product.kflavor,
            bootloader_type=None,
            alias=f"{product.os}/{product.version}",
            extra={"subarches": product.subarches},
            rolling=False,
            base_image="",
        )

    @classmethod
    def from_simplestreams_product(cls, product: Product) -> Self:
        if isinstance(product, BootloaderProduct):
            return cls._from_simplestreams_bootloader_product(product)
        elif isinstance(product, SingleFileProduct):
            return cls._from_simplestreams_single_file_product(product)
        elif isinstance(product, MultiFileProduct):
            return cls._from_simplestreams_multi_file_product(product)
        else:
            raise Exception("Unknown simplestreams product")
