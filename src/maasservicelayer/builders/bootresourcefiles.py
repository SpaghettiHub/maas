# Copyright 2025 Canonical Ltd.  This software is licensed under the
# GNU Affero General Public License version 3 (see the file LICENSE).

from datetime import datetime
import os
from typing import Self, Union

from pydantic import Field

from maascommon.enums.boot_resources import BootResourceFileType
from maasservicelayer.models.base import ResourceBuilder, UNSET, Unset
from maasservicelayer.simplestreams.models import (
    BootloaderFile,
    DownloadableFile,
    ImageFile,
)


class BootResourceFileBuilder(ResourceBuilder):
    """Autogenerated from utilities/generate_builders.py.

    You can still add your custom methods here, they won't be overwritten by
    the generated code.
    """

    created: Union[datetime, Unset] = Field(default=UNSET, required=False)
    extra: Union[dict, Unset] = Field(default=UNSET, required=False)
    filename: Union[str, Unset] = Field(default=UNSET, required=False)
    filename_on_disk: Union[str, Unset] = Field(default=UNSET, required=False)
    filetype: Union[BootResourceFileType, Unset] = Field(
        default=UNSET, required=False
    )
    largefile_id: Union[int, None, Unset] = Field(
        default=UNSET, required=False
    )
    resource_set_id: Union[int, None, Unset] = Field(
        default=UNSET, required=False
    )
    sha256: Union[str, Unset] = Field(default=UNSET, required=False)
    size: Union[int, Unset] = Field(default=UNSET, required=False)
    updated: Union[datetime, Unset] = Field(default=UNSET, required=False)

    @classmethod
    def _from_simplestreams_bootloader_file(
        cls, file: BootloaderFile, resource_set_id: int
    ) -> Self:
        return cls(
            filename=os.path.basename(file.path),
            sha256=file.sha256,
            size=file.size,
            filetype=BootResourceFileType(file.ftype),
            extra={
                "src_package": file.src_package,
                "src_release": file.src_release,
                "src_version": file.src_version,
            },
            resource_set_id=resource_set_id,
        )

    @classmethod
    def _from_simplestreams_image_file(
        cls, file: ImageFile, resource_set_id: int
    ) -> Self:
        return cls(
            filename=os.path.basename(file.path),
            sha256=file.sha256,
            size=file.size,
            filetype=BootResourceFileType(file.ftype),
            extra={"kpackage": file.kpackage} if file.kpackage else {},
            resource_set_id=resource_set_id,
        )

    @classmethod
    def from_simplestreams_file(
        cls, file: DownloadableFile, resource_set_id: int
    ) -> Self:
        if isinstance(file, BootloaderFile):
            return cls._from_simplestreams_bootloader_file(
                file, resource_set_id
            )
        elif isinstance(file, ImageFile):
            return cls._from_simplestreams_image_file(file, resource_set_id)
        else:
            raise Exception("Unknown simplestreams file.")
